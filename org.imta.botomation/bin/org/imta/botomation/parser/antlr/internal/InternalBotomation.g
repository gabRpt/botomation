/*
 * generated by Xtext 2.32.0
 */
grammar InternalBotomation;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.imta.botomation.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.imta.botomation.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.imta.botomation.services.BotomationGrammarAccess;

}

@parser::members {

 	private BotomationGrammarAccess grammarAccess;

    public InternalBotomationParser(TokenStream input, BotomationGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Botomation";
   	}

   	@Override
   	protected BotomationGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleBotomation
entryRuleBotomation returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBotomationRule()); }
	iv_ruleBotomation=ruleBotomation
	{ $current=$iv_ruleBotomation.current; }
	EOF;

// Rule Botomation
ruleBotomation returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='botomation'
		{
			newLeafNode(otherlv_0, grammarAccess.getBotomationAccess().getBotomationKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getBotomationAccess().getBrowserParserRuleCall_1());
		}
		this_Browser_1=ruleBrowser
		{
			$current = $this_Browser_1.current;
			afterParserOrEnumRuleCall();
		}
		otherlv_2='actions'
		{
			newLeafNode(otherlv_2, grammarAccess.getBotomationAccess().getActionsKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBotomationAccess().getActionsActionParserRuleCall_3_0());
				}
				lv_actions_3_0=ruleAction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBotomationRule());
					}
					add(
						$current,
						"actions",
						lv_actions_3_0,
						"org.imta.botomation.Botomation.Action");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleBrowser
entryRuleBrowser returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBrowserRule()); }
	iv_ruleBrowser=ruleBrowser
	{ $current=$iv_ruleBrowser.current; }
	EOF;

// Rule Browser
ruleBrowser returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='browser'
		{
			newLeafNode(otherlv_0, grammarAccess.getBrowserAccess().getBrowserKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_BROWSERNAME
				{
					newLeafNode(lv_name_1_0, grammarAccess.getBrowserAccess().getNameBROWSERNAMETerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getBrowserRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.imta.botomation.Botomation.BROWSERNAME");
				}
			)
		)
	)
;

// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	iv_ruleAction=ruleAction
	{ $current=$iv_ruleAction.current; }
	EOF;

// Rule Action
ruleAction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='openURL'
			{
				newLeafNode(otherlv_0, grammarAccess.getActionAccess().getOpenURLKeyword_0_0());
			}
			(
				(
					lv_openURL_1_0=RULE_STRING
					{
						newLeafNode(lv_openURL_1_0, grammarAccess.getActionAccess().getOpenURLSTRINGTerminalRuleCall_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getActionRule());
						}
						setWithLastConsumed(
							$current,
							"openURL",
							lv_openURL_1_0,
							"org.eclipse.xtext.common.Terminals.STRING");
					}
				)
			)
		)
		    |
		(
			otherlv_2='verifyPageContains'
			{
				newLeafNode(otherlv_2, grammarAccess.getActionAccess().getVerifyPageContainsKeyword_1_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getActionAccess().getVerifyPageContainsVerifyPageContainsParserRuleCall_1_1_0());
					}
					lv_verifyPageContains_3_0=ruleVerifyPageContains
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getActionRule());
						}
						set(
							$current,
							"verifyPageContains",
							lv_verifyPageContains_3_0,
							"org.imta.botomation.Botomation.VerifyPageContains");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleVerifyPageContains
entryRuleVerifyPageContains returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVerifyPageContainsRule()); }
	iv_ruleVerifyPageContains=ruleVerifyPageContains
	{ $current=$iv_ruleVerifyPageContains.current; }
	EOF;

// Rule VerifyPageContains
ruleVerifyPageContains returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{ 
			  getUnorderedGroupHelper().enter(grammarAccess.getVerifyPageContainsAccess().getUnorderedGroup());
			}
			(
				(
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVerifyPageContainsAccess().getUnorderedGroup(), 0)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVerifyPageContainsAccess().getUnorderedGroup(), 0);
				}
							({true}?=>(otherlv_1='type'
							{
								newLeafNode(otherlv_1, grammarAccess.getVerifyPageContainsAccess().getTypeKeyword_0_0());
							}
							(
								(
									lv_type_2_0=RULE_TYPE
									{
										newLeafNode(lv_type_2_0, grammarAccess.getVerifyPageContainsAccess().getTypeTYPETerminalRuleCall_0_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getVerifyPageContainsRule());
										}
										setWithLastConsumed(
											$current,
											"type",
											lv_type_2_0,
											"org.imta.botomation.Botomation.TYPE");
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVerifyPageContainsAccess().getUnorderedGroup());
				}
			)
		)|
		(
			{getUnorderedGroupHelper().canSelect(grammarAccess.getVerifyPageContainsAccess().getUnorderedGroup(), 1)}?=>(
				{
					getUnorderedGroupHelper().select(grammarAccess.getVerifyPageContainsAccess().getUnorderedGroup(), 1);
				}
							({true}?=>(otherlv_3='target'
							{
								newLeafNode(otherlv_3, grammarAccess.getVerifyPageContainsAccess().getTargetKeyword_1_0());
							}
							(
								(
									lv_target_4_0=RULE_STRING
									{
										newLeafNode(lv_target_4_0, grammarAccess.getVerifyPageContainsAccess().getTargetSTRINGTerminalRuleCall_1_1_0());
									}
									{
										if ($current==null) {
											$current = createModelElement(grammarAccess.getVerifyPageContainsRule());
										}
										setWithLastConsumed(
											$current,
											"target",
											lv_target_4_0,
											"org.eclipse.xtext.common.Terminals.STRING");
									}
								)
							)
							))
				{ 
					getUnorderedGroupHelper().returnFromSelection(grammarAccess.getVerifyPageContainsAccess().getUnorderedGroup());
				}
			)
		)
				)+
				{getUnorderedGroupHelper().canLeave(grammarAccess.getVerifyPageContainsAccess().getUnorderedGroup())}?
			)
		)
			{ 
			  getUnorderedGroupHelper().leave(grammarAccess.getVerifyPageContainsAccess().getUnorderedGroup());
			}
	)
;

RULE_TYPE : ('link'|'text');

RULE_BROWSERNAME : ('chrome'|'firefox'|'opera'|'safari');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
